p <- p + geom_tile(aes(long, lat, colour = surftemp))
print(p)
p <- ggplot(nasa1995)
p <- p + geom_tile(aes(long, lat, colour = surftemp, fill = surftemp))
print(p)
p <- ggplot(nasa1995)
p <- p + geom_tile(aes(long, lat, colour = surftemp, fill = surftemp))
print(p)
p <- p + facet_wrap(~month)
print(p)
p <- p + geom_polygon(aes(X, Y, group = PID), colour = "black", fill = "transparent", data = worldLL)
library(PBSmapping)
data(worldLL)
p <- p + geom_polygon(aes(X, Y, group = PID), colour = "black", fill = "transparent", data = worldLL)
print(p)
p <- ggplot(nasa1995)
p <- p + geom_tile(aes(long, lat, colour = surftemp, fill = surftemp))
p <- p + facet_wrap(~month)
print(p)
library(PBSmapping)
data(worldLL)
xlim <- nasa1995$long
ylim <- nasa1995$lat
xlim <- nasa1995$long
ylim <- nasa1995$lat
p <- ggplot(nasa1995)
p <- p + geom_tile(aes(long, lat, colour = surftemp, fill = surftemp))
p <- p + facet_wrap(~month)
print(p)
p <- p + geom_polygon(aes(X-360, Y-360, group = PID), colour = "black", fill = "transparent", data = worldLL)
p <- p + coord_fixed(xlim = xlim, ylim = ylim)
print(p)
xlim <- nasa1995$long
ylim <- nasa1995$lat
p <- ggplot(nasa1995)
p <- p + geom_tile(aes(long, lat, colour = surftemp, fill = surftemp))
p <- p + facet_wrap(~month)
print(p)
data(worldLL)
p <- p + geom_polygon(aes(X-360, Y-360, group = PID), colour = "black", fill = "transparent", data = worldLL)
p <- p + coord_fixed(xlim = xlim, ylim = ylim)
print(p)
p <- ggplot(nasa1995)
p <- p + geom_tile(aes(long, lat, colour = surftemp, fill = surftemp))
p <- p + facet_wrap(~month)
p <- p + geom_polygon(aes(X-360, Y, group = PID), colour = "black", fill = "transparent", data = worldLL)
p <- p + coord_fixed(xlim = xlim, ylim = ylim)
print(p)
library(colourspace)
p <- p + scale_colour_gradientn(colours = diverge_hcl(20))
p <- p + scale_fill_gradientn(colours = diverge_hcl(20))
print(p)
library(colorspace)
p <- p + scale_colour_gradientn(colours = diverge_hcl(20))
p <- p + scale_fill_gradientn(colours = diverge_hcl(20))
print(p)
?nasa
citation(0)
citation()
citation("dplyr")
version()
version
packages <- installed.packages()
head(packages)
contributors()
contributors("dplyr")
contributors()
p <- p + theme(axis.text.x = element_text(angle = 90))
print(p)
p <- p + theme(strip.background = element_rect(fill = "white"))
p <- p + labs(colour = "Surface\nTemperature [ºK?]", fill = "Surface\nTemperature [ºK?]")
print(p)
p <- p + theme(axis.text.x = element_text(angle = 45))
p <- p + theme(strip.background = element_rect(fill = "white"))
p <- p + labs(colour = "Surface\nTemperature [ºK?]", fill = "Surface\nTemperature [ºK?]")
print(p)
xlim <- range(nasa1995$long)
ylim <- range(nasa1995$lat)
p <- ggplot(nasa1995)
p <- p + geom_tile(aes(long, lat, colour = surftemp, fill = surftemp))
p <- p + facet_wrap(~month)
p <- p + geom_polygon(aes(X-360, Y, group = PID), colour = "black", fill = "transparent", data = worldLL)
p <- p + coord_fixed(xlim = xlim, ylim = ylim)
p <- p + scale_colour_gradientn(colours = diverge_hcl(20))
p <- p + scale_fill_gradientn(colours = diverge_hcl(20))
p <- p + theme(axis.text.x = element_text(angle = 45))
p <- p + theme(strip.background = element_rect(fill = "white"))
p <- p + labs(colour = "Surface\nTemperature [ºK?]", fill = "Surface\nTemperature [ºK?]")
print(p)
month.name)
month.name
head(nasa_df)
month.name
tolower(month.name)
toupper(month.name)
substr(month.name, 1, 3)
nchar(month.name)
sort(month.name)
rev(month.name)
nasa_df$month_name <- month.name[nasa_df$month]
head(nasa_df)
tail(nasa_df)
p <- p + facet_wrap(~month_name)
print(p)
nasa1995$month_name <- month.name[nasa1995$month]
head(nasa1995)
tail(nasa1995)
p <- p + facet_wrap(~month_name)
print(p)
p <- ggplot(nasa1995)
p <- p + geom_tile(aes(long, lat, colour = surftemp, fill = surftemp))
p <- p + facet_wrap(~month_name)
print(p)
p <- ggplot(nasa1995)
p <- p + geom_tile(aes(long, lat, colour = surftemp, fill = surftemp))
p <- p + facet_wrap(~month_name)
print(p)
# Add a coastline:
library(PBSmapping)
library(colorspace)
data(worldLL)
p <- p + geom_polygon(aes(X-360, Y, group = PID), colour = "black", fill = "transparent", data = worldLL)
p <- p + coord_fixed(xlim = xlim, ylim = ylim)
p <- p + scale_colour_gradientn(colours = diverge_hcl(20))
p <- p + scale_fill_gradientn(colours = diverge_hcl(20))
print(p)
p <- p + theme(axis.text.x = element_text(angle = 45))
p <- p + theme(strip.background = element_rect(fill = "white"))
p <- p + labs(colour = "Surface\nTemperature [ºK?]", fill = "Surface\nTemperature [ºK?]")
## Playing around with character month name
month.name
tolower(month.name)
toupper(month.name)
substr(month.name, 1, 3)
nchar(month.name)
sort(month.name)
rev(month.name)
nasa1995$month_name <- month.name[nasa1995$month]
head(nasa1995)
tail(nasa1995)
p <- p + facet_wrap(~month_name)
print(p)
nasa1995$month_name <- factor(nasa1995$month_name, levels = month.name)
print(p)
p <- p %+% nasa1995 # substituting the previous data with the new data structure
print(p)
?%+%
group_by(nasa1955, month)
summarize(group_by(nasa1995, month), mean_surftemp = mean(surftemp))
group_by(nasa1995, month)
?group_by
summary1995 <- summarize(group_by(nasa1995, month), mean_surftemp = mean(surftemp))
plot(summary1995$mean_surftemp)
summary1995 <- summarize(group_by(nasa1995, month),
mean_surftemp = mean(surftemp),
max_surftemp = max(surftemp))
plot(summary1995$max_surftemp)
mutate1995 <- mutate(group_by(nasa1995, month),
mean_surftemp = mean(surftemp))
head(mutate1995_)
head(mutate1995)
month.name %>% substr(., 1, 3)  %>% tolower %>% toupper %>% sort
library(reshape2)
volcano_long <- melt (volcano)
volcano_long <- melt(volcano)
head(volcano_long)
names(volcano_long) <- c("x", "y", "elevation")
head(volcano)
volcano_long <- melt(volcano)
head(volcano_long)
names(volcano_long) <- c("x", "y", "elevation")
p <- ggplot(volcano_long)
p <- p + geom_tile(aes(x,y, colour = elevation, fill = elevation))
print(p)
model1 <- lm(elevation ~ poly(x,4)*poly(y,4), data=volcano_long)
volcano_long$fit1 <- predict(model1)
plot(model1)
model1 <- lm(elevation ~ poly(x,4)*poly(y,4), data=volcano_long) # Fitting polynomial model
volcano_long$fit1 <- predict(model1)
plot(model1)
p <- ggplot(volcano_long)
p <- p + geom_tile(aes(x,y, colour=fit1, fill=fit1))
print(p)
model1 <- lm(elevation ~ poly(x,20)*poly(y,20), data=volcano_long) # Fitting polynomial model
volcano_long$fit1 <- predict(model1)
#plot(model1)
p <- ggplot(volcano_long)
p <- p + geom_tile(aes(x,y, colour=fit1, fill=fit1))
print(p)
model1 <- lm(elevation ~ poly(x,50)*poly(y,50), data=volcano_long) # Fitting polynomial model
volcano_long$fit1 <- predict(model1)
#plot(model1)
p <- ggplot(volcano_long)
p <- p + geom_tile(aes(x,y, colour=fit1, fill=fit1))
print(p)
model1 <- lm(elevation ~ poly(x,30)*poly(y,30), data=volcano_long) # Fitting polynomial model
volcano_long$fit1 <- predict(model1)
#plot(model1)
p <- ggplot(volcano_long)
p <- p + geom_tile(aes(x,y, colour=fit1, fill=fit1))
print(p)
model1 <- lm(elevation ~ poly(x,20)*poly(y,20), data=volcano_long) # Fitting polynomial model
volcano_long$fit1 <- predict(model1)
#plot(model1)
p <- ggplot(volcano_long)
p <- p + geom_tile(aes(x,y, colour=fit1, fill=fit1))
print(p)
head(Orange)
rm(list=ls())
curve(dnorm(x), -3, 3, col = "blue", lwd = 3, lty = "12998812",
las = 1, main = "Standard Normal Distribution",
cex.main = 2)
# define
snails <- c(3,1,4,1,5,9,2,6,5,3)  ## weights of snails in grams
snails
length(snails)
max(snails)
min(snails)
var(snails)
sd(snails)
mean(snails)  #arithmetic mean
median(snails)
round(sd(snails), 2)
trunc(sd(snails))
round(2.5)
round(3.5)
round(13.5)
unique(snails)
table(snails)
#is every value unique
length(unique(snails)) == length(snails)
# plot of the data vector:
plot(snails, col = "red", pch = c(1,1,1,1,1,2,2,2,2,2))
# Other types of data plots:
plot(snails)
hist(snails)
barplot(snails)
plot(density(snails))
rug(snails, col = "red")
# See example data
library(help = "datasets")
# See the "volcano" data:
volcano
nrow(volcano)
ncol(volcano)
dim(volcano)
max(volcano)
min(volcano)
# subsetting:
snails[1]   # first value
snails[2]
snails[1:3]
volcano[1:5, 1:5]
volcano[1, 1]
volcano[2]
volcano[88]
# 3-D perpective plot:
persp(volcano, col = "green")
# Colour map:
image(volcano)
# Contour map:
contour(volcano, col = "blue", lwd = 2)
contour(volcano, zlim = c(0,160), col = "darkgreen", levels = seq(0, 160, 5))
contour(volcano, zlim = c(161,200), col = "red", add=T, levels = seq(165, 200, 5))
image(volcano)
image(volcano, col = terrain.colors(20))
image(volcano, col = rainbow(20))
image(volcano , col = cm.colors(20))
persp
?persp
dat<-data.frame(treatment = rep(1:2,each=10), variable = runif(20,1,12))
dat
aggregate(dat$variable,by=list(dat$treatment),sum)
?visreg
install.packages("visreg")
?visreg
library(visreg)
?visreg
library(raster)
library(maptools)
library(dismo)
install.packages(c("caret", "cluster", "codetools", "colorspace", "foreign", "ggplot2", "htmlwidgets", "knitr", "lattice", "maptools", "Matrix", "mgcv", "R.oo", "R.utils", "RcppArmadillo", "reshape2", "rgdal", "RStoolbox", "scales", "shiny", "SparseM", "survival", "XML", "yaml"))
?plot.lm
province<-c("British Columbia")
canada<-getData('GADM', countr="CAN", level=1)
ca.provinces<-canada[which(canada$NAME_1 %in% province),]
library(rgdal)
province<-c("British Columbia")
canada<-getData('GADM', countr="CAN", level=1)
ca.provinces<-canada[which(canada$NAME_1 %in% province),]
library(raster)
library(raster)
library(sp)
canada<-getData('GADM', countr="CAN", level=1)
ca.provinces<-canada[which(canada$NAME_1 %in% province),]
plot(ca.provinces)
dat<-data.frame(Catch = c(18,82), Landed value = c(34,66),
International trade value = c(33,67))
dat<-data.frame(x = c("Catch","Landed value",
"International trade value"),
Shellfish = c(18,34,33),
Finfish = c(82,66,67))
?barplot()
tab<-table(dat$Shellfish,dat$Finfish)
barplot(tab)
tab
barplot(dat$Shellfish)
dat<-melt(dat,id=c("x"))
library(reshape)
install.packages("reshape")
library(reshape)
dat<-melt(dat,id=c("x"))
dat
table(value)
table(dat$value)
barplot(dat$Shellfish)
barplot(dat$value)
tab<-table(dat$value)
barplot(tab)
tab<-table(dat$value,dat$variable)
barplot(tab)
dat.ord<-matrix(dat$value)
matrix(dat$value,nrow=3)
dat.ord<-matrix(dat$value,nrow=3,by.row=T)
dat.ord<-matrix(dat$value,nrow=3,byrow=T)
dat.ord
dat.ord<-matrix(dat$value,byrow=T)
dat.ord
dat.ord<-matrix(dat$value,nrow=2,byrow=T)
dat.ord
str(dat)
dat.ord<-matrix(dat$value,nrow=2,byrow=T)
colnames(dat.ord)=levels(dat$x)
rownames(dat.ord)=levels(dat$variable)
barplot(dat.ord)
legend("topright",inset=c(-0.25,0), legend=rownames(dat.ord))
barplot(dat.ord,ylab="%")
legend("topright",inset=c(-0.25,0), legend=rownames(dat.ord))
par(mar=c(5.1, 4.1, 4.1, 7.1), xpd=TRUE)
barplot(dat.ord,ylab="%")
legend("topright",inset=c(-0.25,0), legend=rownames(dat.ord))
barplot(dat.ord,ylab="%",col=c("grey10","grey80"))
barplot(dat.ord,ylab="%",col=c("grey20","grey80"))
barplot(dat.ord,ylab="%",col=c("grey40","grey80"))
barplot(dat.ord,ylab="%",col=c("blue","grey80"))
barplot(dat.ord,ylab="%",col=c("darkblue","grey80"))
barplot(dat.ord,ylab="%",col=c("darkblue","skyblue"))
legend("topright",inset=c(-0.25,0), legend=rownames(dat.ord),
fill=c("darkblue","skyblue"))
windows(width=4,height=3)
quartz(width=4,height=3)
par(mar=c(5.1, 4.1, 4.1, 7.1), xpd=TRUE)
barplot(dat.ord,ylab="%",col=c("darkblue","skyblue"))
legend("topright",inset=c(-0.25,0), legend=rownames(dat.ord),
fill=c("darkblue","skyblue"))
quartz(width=4,height=3)
par(mar=c(5.1, 4.1, 4.1, 7.1), xpd=TRUE)
barplot(dat.ord,ylab="%",col=c("darkblue","skyblue"))
legend("topright",inset=c(-5,0), legend=rownames(dat.ord),
fill=c("darkblue","skyblue"))
legend("topright",inset=c(-3,0), legend=rownames(dat.ord),
fill=c("darkblue","skyblue"))
legend("topright",inset=c(-1,0), legend=rownames(dat.ord),
fill=c("darkblue","skyblue"))
dat<-data.frame(x = c("Catch","Landed value",
"International trade value"),
Shellfish = c(18,34,33),
Finfish = c(82,66,67))
K<-100
r<-0.2
N<-c(1:100)
G<-r*N*(1-N/K)
plot(G~N)
A<-G+N
plot(A~N)
A
Ninit<-1
time<-100
source('~/.active-rstudio-document', echo=TRUE)
A<-vector()
K<-100
r<-0.2
time<-100
Ninit<-1
A<-vector()
A[1]<-Ninit
i<-1
N<-A[i]
N<-N+r*N*(1-N/K)
A[i+1]<-N
K<-100
r<-0.2
time<-100
Ninit<-1
A<-vector()
A[1]<-Ninit
for(i in 1:length(time)){
N<-A[i]
N<-N+r*N*(1-N/K)
A[i+1]<-N
}
plot(A~time)
K<-100
r<-0.2
time<-100
Ninit<-1
A<-vector()
A[1]<-Ninit
for(i in 1:length(time)){
N<-A[i]
N<-N+r*N*(1-N/K)
A[i+1]<-N
}
rm(list=ls())
K<-100
r<-0.2
time<-100
Ninit<-1
A<-vector()
A[1]<-Ninit
for(i in 1:length(time)){
N<-A[i]
N<-N+r*N*(1-N/K)
A[i+1]<-N
}
K<-100
r<-0.2
time<-1:100
Ninit<-1
A<-vector()
A[1]<-Ninit
for(i in 1:length(time)){
N<-A[i]
N<-N+r*N*(1-N/K)
A[i+1]<-N
}
plot(A~time)
plot(A)
K<-100
r<-0.1
time<-1:100
Ninit<-1
A<-vector()
A[1]<-Ninit
for(i in 1:length(time)){
N<-A[i]
N<-N+r*N*(1-N/K)
A[i+1]<-N
}
plot(A)
a<-0.7
W<-1:100
Ana<-W^a
plot(Ana~W)
a<-0.9
W<-1:100
Ana<-W^a
plot(Ana~W)
a<-0.5
W<-1:100
Ana<-W^a
plot(Ana~W)
install.packages(c("RCurl", "XML"))
library(RCurl)
library(XML)
library(plyr)
h=basicTextGatherer()
curlPerform(url = 'http://sirs.agrocampus-ouest.fr/EcoBase/php/webser/soap-client_3.php',writefunction=h$update)
data<-xmlTreeParse(h$value(),useInternalNodes=TRUE)
liste_mod<-ldply(xmlToList(data),data.frame)
View(liste_mod)
?lm
?setClass
setClass("Person", representation(name = "character", age = "numeric"))
setClass("Employee", representation(boss = "Person"), contains = "Person")
hadley <- new("Person", name = "Hadley", age = 31)
Person
hadley
Hadley
hadley <- new("Person", name = "Hadley")
Hadley
hadley
slot(hadley, "age")
hadley <- new("Person", name = "Hadley", age = 31)
slot(hadley, "age")
getSlots("Person")
getSlots("hadley")
getSlots(hadley)
Slots(hadley)
slots(hadley)
(hadley)
slot(hadley)
hadley <- new("Person", name = "Hadley", age = 31)
slot(hadley,"Hadley")
slot(hadley)
slot(hadley,"name")
slot(hadley,"age")
rm(list=ls())
setwd("~/GitHub/open-climate-change/")
setwd('/Users/robins64/Documents/git_repos/open-climate-change')
library(here); library(dplyr); library(tidyr); library(ggplot2); theme_set(theme_bw()); library(gridExtra); library(lme4)
load(file='Data/altmetric_OA_clean.Rdata')
names(alt)
means<-alt %>% select(Altmetric.Attention.Score, Journal, year, SJR,News.mentions, Blog.mentions, Policy.mentions, Twitter.mentions, OA) %>%
filter(!Journal == '') %>%
group_by(Journal, OA, year) %>%
summarise(attention = mean(Altmetric.Attention.Score),
news = mean(News.mentions),
blog=mean(Blog.mentions),
policy=mean(Policy.mentions),
twitter=mean(Twitter.mentions),
SJR = mean(SJR))
